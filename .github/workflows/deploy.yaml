# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy GitHub Pages Site
on:
  # Runs after the pre-deploy workflow completes
  workflow_run:
    workflows: ["Pre-Deploy Tasks"]
    types:
      - completed
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    # Only run if the pre-deploy workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Report deployment success
  report:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Report Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy.outputs.page_url || steps.deployment.outputs.page_url }}';
            const message = `Deployment Successful\n\nSite deployed successfully\nLive site: ${deploymentUrl}\n\nDeployed from commit ${context.sha.substring(0, 7)}`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });
            
            console.log(`Deployment successful! Site is live at: ${deploymentUrl}`);
